from flask import Flask
from threading import Thread
import os
import g4f
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import re
import html

# Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Bot is alive!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
flask_thread = Thread(target=run_flask)
flask_thread.daemon = True
flask_thread.start()

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN', "7236643509:AAEhGGP9CPnRcJVTHojegpBiGwk9oREXg_A")
CHANNEL_ID = "@pro_flauta"

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class ChatStates(StatesGroup):
    chatting = State()

chat_contexts = {}

async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status not in ['left', 'kicked', 'banned']
    except Exception:
        return False

def get_subscription_keyboard():
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")]], resize_keyboard=True)
    return keyboard

def get_main_keyboard():
    keyboard = [
        [KeyboardButton(text="üîÑ –ó–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É")],
        [KeyboardButton(text="üöÄ –ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã"), KeyboardButton(text="üåø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def split_long_message(message, chunk_size=4096):
    return [message[i:i + chunk_size] for i in range(0, len(message), chunk_size)]

def get_user_agreement():
    return (
        "üåø *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ò–ò –±–æ—Ç–∞ Neiro Flaut*\n\n"
        "üìù *1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è*\n"
        "1.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò –±–æ—Ç–∞ Neiro Flaut.\n"
        "1.2. –ò—Å–ø–æ–ª—å–∑—É—è –ë–æ—Ç–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.\n\n"
        "üéØ *2. –ü—Ä–µ–¥–º–µ—Ç –°–æ–≥–ª–∞—à–µ–Ω–∏—è*\n"
        "2.1. –ë–æ—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ Flaut-Fast.\n"
        "2.2. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–æ–º–æ—â–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö.\n\n"
        "‚öñÔ∏è *3. –ü—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω*\n"
        "3.1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø–æ–ª—É—á–∞—Ç—å acceso –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ë–æ—Ç–∞ –∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.\n"
        "3.2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑—É–µ—Ç—Å—è –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–æ—Ç–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
        "3.3. –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø—Ä–µ–∫—Ä–∞—â–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –°–æ–≥–ª–∞—à–µ–Ω–∏—è.\n\n"
        "üõ°Ô∏è *4. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏*\n"
        "4.1. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ–¥–Ω–∞–∫–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –µ–µ —Ç–æ—á–Ω–æ—Å—Ç—å.\n"
        "4.2. –ë–æ—Ç –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
        "üîí *5. –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å*\n"
        "5.1. –í—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ë–æ—Ç–æ–º –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.\n"
        "5.2. –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.\n\n"
        "üìÖ *6. –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è*\n"
        "6.1. –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É —Å –º–æ–º–µ–Ω—Ç–∞ –µ–≥–æ –∞–∫—Ü–µ–ø—Ç–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n"
        "6.2. –í —Å–ª—É—á–∞–µ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π —Å—Ç–æ—Ä–æ–Ω—ã —Å—Ç—Ä–µ–º—è—Ç—Å—è —Ä–µ—à–∏—Ç—å –∏—Ö –ø—É—Ç–µ–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤.\n\n"
        "*–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –ê–≤–≥—É—Å—Ç 2025 –≥–æ–¥–∞ (26.08.2025)*\n\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ë–æ—Ç–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è."
    )

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        if not await check_subscription(message.from_user.id):
            await message.answer(
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª @pro_flauta , —è –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞—Å –Ω–µ –æ—Ç–ø—É–≥–Ω–µ—Ç))",
                reply_markup=get_subscription_keyboard()
            )
            return
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, —è –§–ª–∞—É—Ç, –Ω–æ —Ç–∞–∫–∂–µ –º–æ–≥—É –±—ã—Ç—å —Ç–≤–æ–∏–º –∏—Å—Ç–∏–Ω–Ω—ã–º –±—Ä–æ! –ó–∞–¥–∞–≤–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—á—É –Ω–∞ –≤—Å—ë, –æ —á—ë–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å. –ú–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Flaut-Fast –Ω–µ –¥–∞—Å—Ç –±—ã—Ç—å –Ω–∏–∫–æ–º—É —Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–º!) üíó\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start , –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å",
            reply_markup=get_main_keyboard()
        )
        await state.set_state(ChatStates.chatting)
        chat_contexts[message.from_user.id] = [{"role": "system",
                                                "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –∑–Ω–∞–∫–∏ –≤–º–µ—Å—Ç–æ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π *, /, ^, ‚â§, ‚â•, ‚â†, ‚àë, ‚àè, ‚àö –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞–ø—Ä—è–º—É—é."}]
    except Exception as e:
        print(f"Error in start command: {e}")

@dp.message(lambda message: message.text == "üöÄ –ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã")
async def show_projects(message: types.Message):
    if not await check_subscription(message.from_user.id):
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª @pro_flauta , –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ /start. —è –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞—Å –Ω–µ –æ—Ç–ø—É–≥–Ω–µ—Ç))",
            reply_markup=get_subscription_keyboard()
        )
        return
    await message.answer(
        "–ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã/—Å–æ—Ü—Å–µ—Ç–∏:\n"
        "1. –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è - https://t.me/travvisbot (–¥–∞ –æ–Ω —à–∫–æ–ª—å–Ω–∏–∫)\n"
        "2. –õ–∏—á–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è - @poopker \n"
        "3. –°–∞–π—Ç –§–ª–∞—É—Ç–∞ - https://flautgpt.yhub.net \n"
        "4. –ú–∏—Ä–ë–µ–∑–†–ö–ù - https://mirbezrkn.yhub.net \n"
    )

@dp.message(lambda message: message.text == "üåø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
async def show_user_agreement(message: types.Message):
    if not await check_subscription(message.from_user.id):
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª –ø–æ—Å–≤–µ—â–µ–Ω–Ω—ã–π –§–ª–∞—É—Ç—É –∏ –º–æ–∏–º –¥—Ä—É–≥–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º, –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞—Å –Ω–µ –æ—Ç–ø—É–≥–Ω–µ—Ç))",
            reply_markup=get_subscription_keyboard()
        )
        return

    agreement_text = get_user_agreement()
    split_messages = split_long_message(agreement_text)

    for msg in split_messages:
        await message.answer(msg, parse_mode="Markdown")

@dp.message(lambda message: message.text == "üîÑ –ó–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É")
async def end_chat(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in chat_contexts:
        chat_contexts.pop(user_id)
    await message.answer("–ë–µ—Å–µ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞(( –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É, –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤ –≤–æ–ø—Ä–æ—Å, —è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –æ–±—â–µ–Ω–∏—é —Å –≤–∞–º–∏!)")
    await state.set_state(ChatStates.chatting)
    chat_contexts[message.from_user.id] = [{"role": "system",
                                            "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –∑–Ω–∞–∫–∏ –≤–º–µ—Å—Ç–æ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π *, /, ^, ‚â§, ‚â•, ‚â†, ‚àë, ‚àè, ‚àö –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞–ø—Ä—è–º—É—é."}]

@dp.message(ChatStates.chatting)
async def handle_message(message: types.Message, state: FSMContext):
    if not await check_subscription(message.from_user.id):
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscription_keyboard()
        )
        return

    if message.text not in ["üîÑ –ó–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É", "üöÄ –ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã", "üåø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"]:
        user_id = message.from_user.id
        user_input = message.text.strip()

        if user_id not in chat_contexts:
            chat_contexts[user_id] = [
                {"role": "system", "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."}]
        chat_contexts[user_id].append({"role": "user", "content": user_input})

        await message.bot.send_chat_action(message.chat.id, "typing")

        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: '{user_input}'. –û—Ç–≤–µ—Ç—å —á–µ—Ç–∫–æ –∏ —è—Å–Ω–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ, –ø–æ –¥—Ä—É–∂–µ—Å–∫–∏ —Å –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º  –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å."
        prompt += "\n–ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã:\n" + "\n".join([item["content"] for item in chat_contexts[user_id]])

        try:
            response = g4f.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
            )

            if isinstance(response, dict) and 'choices' in response:
                assistant_message = response['choices'][0]['message']['content']
            else:
                assistant_message = str(response)

        except Exception as e:
            assistant_message = f"–§–ª–∞—É—Ç –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ—â–µ–Ω–∏—è(( –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)} , –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üíî"
        
        chat_contexts[user_id].append({"role": "assistant", "content": assistant_message})
        decoded_response = html.unescape(assistant_message)
        split_messages = split_long_message(decoded_response)

        for msg in split_messages:
            await message.answer(msg, parse_mode="Markdown")

async def main():
    print("ü§ñ –ë–æ—Ç Flaut –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())
